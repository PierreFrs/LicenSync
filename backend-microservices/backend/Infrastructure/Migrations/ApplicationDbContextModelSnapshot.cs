// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using Infrastructure.Data;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("AlbumTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("album_title");

                    b.Property<string>("AlbumVisualPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("album_visual_path");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("album");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07373bbe-1a4a-4e43-a177-5260e80b497a"),
                            AlbumTitle = "The Dark Side of the Moon",
                            AlbumVisualPath = "/src/backend/Uploads/Pictures/AlbumVisuals/07373bbe-1a4a-4e43-a177-5260e80b497athe_dark_side_of_the_moon.jpg",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("42ddc682-eaa6-4ae4-bca6-c9672e1dfa14"),
                            AlbumTitle = "disraeli_gears",
                            AlbumVisualPath = "/src/backend/Uploads/Pictures/AlbumVisuals/42ddc682-eaa6-4ae4-bca6-c9672e1dfa14disraeli_gears.jpg",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("a0b0b6e2-0b7e-4b4e-8f3d-3e9b8e1b1c4a"),
                            AlbumTitle = "The Wall",
                            AlbumVisualPath = "/src/backend/Uploads/Pictures/AlbumVisuals/a0b0b6e2-0b7e-4b4e-8f3d-3e9b8e1b1c4athe_wall.jpg",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        });
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ContributionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("contribution_id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("track_id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("ContributionId");

                    b.HasIndex("TrackId");

                    b.ToTable("artist");

                    b.HasData(
                        new
                        {
                            Id = new Guid("332b8af0-e2af-41ac-a2ad-4bafdf26492e"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Nick",
                            Lastname = "Mason",
                            TrackId = new Guid("8b74701f-2636-42a0-af8e-ff353169a6c2")
                        },
                        new
                        {
                            Id = new Guid("a0da1f96-4cdf-4490-8f70-be07741229a3"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "David",
                            Lastname = "Gilmour",
                            TrackId = new Guid("8b74701f-2636-42a0-af8e-ff353169a6c2")
                        },
                        new
                        {
                            Id = new Guid("9cefa4a8-ac72-4551-bb2c-14b4c2aaa4ed"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Roger",
                            Lastname = "Waters",
                            TrackId = new Guid("11232dcf-2f55-41d2-86f5-07026989e827")
                        },
                        new
                        {
                            Id = new Guid("3e235143-6286-4c61-9190-dcdb4f3aab23"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Richard",
                            Lastname = "Wright",
                            TrackId = new Guid("d23d9b8e-50ff-4322-b454-00539e009aa9")
                        },
                        new
                        {
                            Id = new Guid("0a4eebf1-9578-4c8b-95d4-98a3857543c4"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Syd",
                            Lastname = "Barrett",
                            TrackId = new Guid("12fba9b9-43de-41fa-9086-5ce2a34cb971")
                        },
                        new
                        {
                            Id = new Guid("f7c9d153-a0e2-4647-841d-bf525fbe0ab5"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Roger",
                            Lastname = "Waters",
                            TrackId = new Guid("a4037469-38b4-4fb5-81ab-79049e16de19")
                        },
                        new
                        {
                            Id = new Guid("ac862365-242f-4932-b9a3-71a354386f20"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "David",
                            Lastname = "Gilmour",
                            TrackId = new Guid("385dcdba-b43b-4f46-8d04-51da0b863b1d")
                        },
                        new
                        {
                            Id = new Guid("acc6c5a9-cdd9-4841-8c02-dc56e4e6d6b6"),
                            ContributionId = new Guid("ca64c63d-f5eb-47d6-aeee-b720c80ad82a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Eric",
                            Lastname = "Clapton",
                            TrackId = new Guid("feb3ccab-ddfe-4e32-92ae-9f34d107c82f")
                        },
                        new
                        {
                            Id = new Guid("30800195-feb4-472d-8b9d-842c8e8330ee"),
                            ContributionId = new Guid("ca64c63d-f5eb-47d6-aeee-b720c80ad82a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jack",
                            Lastname = "Bruce",
                            TrackId = new Guid("1c4611b8-0483-48af-8a47-eb57215cc6f1")
                        },
                        new
                        {
                            Id = new Guid("db56ed2a-ff62-4083-a57c-70b0b050aeb8"),
                            ContributionId = new Guid("ca64c63d-f5eb-47d6-aeee-b720c80ad82a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Eric",
                            Lastname = "Clapton",
                            TrackId = new Guid("1c4611b8-0483-48af-8a47-eb57215cc6f1")
                        },
                        new
                        {
                            Id = new Guid("3be31500-5217-47f5-91fc-3a2a1a166220"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Roger",
                            Lastname = "Waters",
                            TrackId = new Guid("ff3f70d3-3dbf-4e72-b44f-94147378bbe6")
                        },
                        new
                        {
                            Id = new Guid("37446071-3306-4a28-90be-beb947241c12"),
                            ContributionId = new Guid("ca64c63d-f5eb-47d6-aeee-b720c80ad82a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Roger",
                            Lastname = "Waters",
                            TrackId = new Guid("d564f3a2-4e56-47aa-82a7-d3e2c4b5d6f7")
                        },
                        new
                        {
                            Id = new Guid("b35ff007-544c-4361-accf-aea0328441a8"),
                            ContributionId = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Eric",
                            Lastname = "Clapton",
                            TrackId = new Guid("e4c4d81a-cbd5-4087-acc5-f23a4cb6315a")
                        });
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Contribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("contribution");

                    b.HasData(
                        new
                        {
                            Id = new Guid("073fb88b-95d8-4b4e-85e3-ad9637a681a4"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Label = "Musique"
                        },
                        new
                        {
                            Id = new Guid("ca64c63d-f5eb-47d6-aeee-b720c80ad82a"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Label = "Paroles"
                        },
                        new
                        {
                            Id = new Guid("a5222888-0597-4072-8852-037bf1a0cf91"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Label = "Musique et paroles"
                        });
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Label = "Rock"
                        },
                        new
                        {
                            Id = new Guid("d7a30e56-6073-46e6-86d1-4a4dc7870d75"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Label = "Pop"
                        },
                        new
                        {
                            Id = new Guid("b1538091-1957-401b-932b-cef92e05654f"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Label = "Rap"
                        });
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("album_id");

                    b.Property<string>("AudioFilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("audio_file_path");

                    b.Property<Guid?>("BlockchainHashId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("blockchain_hash_id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("FirstGenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("first_genre_id");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("length");

                    b.Property<string>("RecordLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("record_label");

                    b.Property<Guid?>("SecondaryGenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("secondary_genre_id");

                    b.Property<string>("TrackTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("track_title");

                    b.Property<string>("TrackVisualPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("track_visual_path");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("FirstGenreId");

                    b.HasIndex("SecondaryGenreId");

                    b.ToTable("track");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b74701f-2636-42a0-af8e-ff353169a6c2"),
                            AlbumId = new Guid("07373bbe-1a4a-4e43-a177-5260e80b497a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/8b74701f-2636-42a0-af8e-ff353169a6c2_speak_to_me.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "01:30",
                            SecondaryGenreId = new Guid("d7a30e56-6073-46e6-86d1-4a4dc7870d75"),
                            TrackTitle = "Speak to Me",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/8b74701f-2636-42a0-af8e-ff353169a6c2_speak_to_me.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("d564f3a2-4e56-47aa-82a7-d3e2c4b5d6f7"),
                            AlbumId = new Guid("07373bbe-1a4a-4e43-a177-5260e80b497a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/d564f3a2-4e56-47aa-82a7-d3e2c4b5d6f7_breathe.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "02:49",
                            TrackTitle = "Breathe",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/d564f3a2-4e56-47aa-82a7-d3e2c4b5d6f7_breathe.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("11232dcf-2f55-41d2-86f5-07026989e827"),
                            AlbumId = new Guid("07373bbe-1a4a-4e43-a177-5260e80b497a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/11232dcf-2f55-41d2-86f5-07026989e827_on_the_run.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "03:45",
                            SecondaryGenreId = new Guid("d7a30e56-6073-46e6-86d1-4a4dc7870d75"),
                            TrackTitle = "On the Run",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/11232dcf-2f55-41d2-86f5-07026989e827_on_the_run.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("d23d9b8e-50ff-4322-b454-00539e009aa9"),
                            AlbumId = new Guid("07373bbe-1a4a-4e43-a177-5260e80b497a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/d23d9b8e-50ff-4322-b454-00539e009aa9_time.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "07:05",
                            TrackTitle = "Time",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/d23d9b8e-50ff-4322-b454-00539e009aa9_time.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("12fba9b9-43de-41fa-9086-5ce2a34cb971"),
                            AlbumId = new Guid("a0b0b6e2-0b7e-4b4e-8f3d-3e9b8e1b1c4a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/12fba9b9-43de-41fa-9086-5ce2a34cb971_wish_you_were_here.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "05:40",
                            SecondaryGenreId = new Guid("d7a30e56-6073-46e6-86d1-4a4dc7870d75"),
                            TrackTitle = "Wish You Were Here",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/12fba9b9-43de-41fa-9086-5ce2a34cb971_wish_you_were_here.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("a4037469-38b4-4fb5-81ab-79049e16de19"),
                            AlbumId = new Guid("a0b0b6e2-0b7e-4b4e-8f3d-3e9b8e1b1c4a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/a4037469-38b4-4fb5-81ab-79049e16de19_comfortably_numb.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "06:21",
                            TrackTitle = "Comfortably Numb",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/a4037469-38b4-4fb5-81ab-79049e16de19_comfortably_numb.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("ff3f70d3-3dbf-4e72-b44f-94147378bbe6"),
                            AlbumId = new Guid("a0b0b6e2-0b7e-4b4e-8f3d-3e9b8e1b1c4a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/ff3f70d3-3dbf-4e72-b44f-94147378bbe6_another_brick_in_the_wall_pt_2.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "03:59",
                            TrackTitle = "Another Brick in the Wall, Pt. 2",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/ff3f70d3-3dbf-4e72-b44f-94147378bbe6_another_brick_in_the_wall_pt_2.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("385dcdba-b43b-4f46-8d04-51da0b863b1d"),
                            AlbumId = new Guid("a0b0b6e2-0b7e-4b4e-8f3d-3e9b8e1b1c4a"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/385dcdba-b43b-4f46-8d04-51da0b863b1d_hey_you.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "04:40",
                            TrackTitle = "Hey You",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/385dcdba-b43b-4f46-8d04-51da0b863b1d_hey_you.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("feb3ccab-ddfe-4e32-92ae-9f34d107c82f"),
                            AlbumId = new Guid("42ddc682-eaa6-4ae4-bca6-c9672e1dfa14"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/feb3ccab-ddfe-4e32-92ae-9f34d107c82f_sunshine_of_your_love.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "04:10",
                            SecondaryGenreId = new Guid("b1538091-1957-401b-932b-cef92e05654f"),
                            TrackTitle = "Sunshine of Your Love",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/feb3ccab-ddfe-4e32-92ae-9f34d107c82f_sunshine_of_your_love.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("1c4611b8-0483-48af-8a47-eb57215cc6f1"),
                            AlbumId = new Guid("42ddc682-eaa6-4ae4-bca6-c9672e1dfa14"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/1c4611b8-0483-48af-8a47-eb57215cc6f1_white_room.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "04:58",
                            TrackTitle = "White Room",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/1c4611b8-0483-48af-8a47-eb57215cc6f1_white_room.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        },
                        new
                        {
                            Id = new Guid("e4c4d81a-cbd5-4087-acc5-f23a4cb6315a"),
                            AlbumId = new Guid("42ddc682-eaa6-4ae4-bca6-c9672e1dfa14"),
                            AudioFilePath = "/src/backend/Uploads/AudioFiles/e4c4d81a-cbd5-4087-acc5-f23a4cb6315a_tales_of_brave_ulysses.mp3",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstGenreId = new Guid("d3ed7bf3-4f90-4b5d-8006-76f4560402ba"),
                            Length = "02:46",
                            SecondaryGenreId = new Guid("b1538091-1957-401b-932b-cef92e05654f"),
                            TrackTitle = "Tales of Brave Ulysses",
                            TrackVisualPath = "/src/backend/Uploads/Pictures/TrackVisuals/e4c4d81a-cbd5-4087-acc5-f23a4cb6315a_tales_of_brave_ulysses.jpg",
                            UserId = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45"
                        });
                });

            modelBuilder.Entity("backend.ORM.Models.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserInfoId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0d28ce7-072a-4e2e-b3a7-888b7a88fb45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2494767-7420-4216-b433-47619c6818b1",
                            Email = "p.fraisse@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Pierre",
                            LastName = "Fraisse",
                            LockoutEnabled = true,
                            NormalizedEmail = "P.FRAISSE@MAIL.COM",
                            NormalizedUserName = "P.FRAISSE@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHIpnPV0RitSgXYLnB/w9OAc0ER79cE0ZGHRiIIPIH3a1tnKIYpBGtOod+TMJsYcEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7F4FEWBMI62NF6VRYEGZBOYBBUJMILQK",
                            TwoFactorEnabled = false,
                            UserInfoId = new Guid("d8f71222-4d29-4ff4-925a-68a308552c71"),
                            UserName = "p.fraisse@mail.com"
                        });
                });

            modelBuilder.Entity("backend.ORM.Models.Identity.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8f71222-4d29-4ff4-925a-68a308552c71"),
                            Address = "1 rue de la Paix",
                            Birthdate = new DateTime(1996, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Paris",
                            Country = "France",
                            CreationDate = new DateTime(2024, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "0123456789",
                            PostalCode = "75000"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.ORM.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.ORM.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.ORM.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.ORM.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Artist", b =>
                {
                    b.HasOne("backend.ORM.Models.Domains.Contribution", "Contribution")
                        .WithMany("Artists")
                        .HasForeignKey("ContributionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.ORM.Models.Domains.Track", "Track")
                        .WithMany("Artists")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contribution");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Track", b =>
                {
                    b.HasOne("backend.ORM.Models.Domains.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("backend.ORM.Models.Domains.Genre", "FirstGenre")
                        .WithMany()
                        .HasForeignKey("FirstGenreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("backend.ORM.Models.Domains.Genre", "SecondaryGenre")
                        .WithMany()
                        .HasForeignKey("SecondaryGenreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Album");

                    b.Navigation("FirstGenre");

                    b.Navigation("SecondaryGenre");
                });

            modelBuilder.Entity("backend.ORM.Models.Identity.AppUser", b =>
                {
                    b.HasOne("backend.ORM.Models.Identity.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Contribution", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("backend.ORM.Models.Domains.Track", b =>
                {
                    b.Navigation("Artists");
                });
#pragma warning restore 612, 618
        }
    }
}
